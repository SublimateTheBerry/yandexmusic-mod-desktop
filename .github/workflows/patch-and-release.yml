name: Patch and Release Yandex Music

on:
  workflow_dispatch:
    inputs:
      yandex_music_version:
        description: 'Yandex Music x64 version (e.g., 5.51.1)'
        required: true
        default: '5.51.1'
      release_notes_ru_text:
        description: 'Release notes for Russian (plain text/simple markdown)'
        required: false
        default: |
          **Обновление патча Яндекс Музыки!**
          
          *   Исправлена работа Discord RPC.
          *   Обновлены внутренние ссылки для обновлений.
          *   Теперь вы сможете получать информацию о патчах прямо в приложении.

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    - id: download_installer
      run: |
        $version = "${{ github.event.inputs.yandex_music_version }}"
        $downloadUrl = "https://music-desktop-application.s3.yandex.net/stable/Yandex_Music_x64_$version.exe"
        $installerPath = Join-Path $env:TEMP "YandexMusicInstaller.exe"
        Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath -TimeoutSec 300
        echo "INSTALLER_PATH=$installerPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh

    - run: |
        $installerPath = "${{ steps.download_installer.outputs.INSTALLER_PATH }}"
        Start-Process -FilePath "$installerPath" -ArgumentList "/S" -Wait
      shell: pwsh

    - run: |
        Start-Sleep -Seconds 2
      shell: pwsh

    - id: verify_source_asar
      run: |
        $sourceAsarPath = Join-Path $env:LOCALAPPDATA 'Programs' 'YandexMusic' 'resources' 'app.asar'
        if (-not (Test-Path $sourceAsarPath)) {
            $sourceAsarPathProgramFiles = Join-Path $env:ProgramFiles 'Yandex Music' 'resources' 'app.asar'
            if (Test-Path $sourceAsarPathProgramFiles) {
                $sourceAsarPath = $sourceAsarPathProgramFiles
            } else {
                Write-Error "Source app.asar not found in standard locations."
                exit 1
            }
        }
        echo "SOURCE_ASAR_PATH=$sourceAsarPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
      
    - id: generate_release_info
      run: |
        $patchedAsarPath = Join-Path "${{ github.workspace }}" "app.asar"
        $baseVersion = "${{ github.event.inputs.yandex_music_version }}"
        $timestamp = (Get-Date -Format "yyyyMMdd.HHmmss")
        $version = "$baseVersion-patched.$timestamp"
        echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "asar_file_name=app.asar" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "PATCHED_ASAR_TEMP_PATH=$patchedAsarPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

        $repoOwner = "${{ github.repository_owner }}"
        $repoName = "${{ github.event.repository.name }}"
        $githubReleasesUrl = "https://github.com/$repoOwner/$repoName/releases"
        $githubReleasesDownloadUrlBase = "https://github.com/$repoOwner/$repoName/releases/download"
        echo "GITHUB_RELEASES_URL=$githubReleasesUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "GITHUB_RELEASES_DOWNLOAD_URL_BASE=$githubReleasesDownloadUrlBase" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh

    - name: Run Patcher Script
      id: patcher
      run: |
        $sourceAsar = "${{ steps.verify_source_asar.outputs.SOURCE_ASAR_PATH }}"
        $patchedAsarOutput = "${{ steps.generate_release_info.outputs.PATCHED_ASAR_TEMP_PATH }}"
        $patchVersion = "${{ steps.generate_release_info.outputs.version }}"
        $githubReleasesUrl = "${{ steps.generate_release_info.outputs.GITHUB_RELEASES_URL }}"
        $githubReleasesDownloadUrlBase = "${{ steps.generate_release_info.outputs.GITHUB_RELEASES_DOWNLOAD_URL_BASE }}"

        $env:YAMUSIC_SOURCE_ASAR_PATH = $sourceAsar
        $env:YAMUSIC_PATCHED_ASAR_OUTPUT_PATH = $patchedAsarOutput
        $env:YAMUSIC_PATCH_VERSION = $patchVersion
        $env:GITHUB_RELEASES_URL = $githubReleasesUrl
        $env:GITHUB_RELEASES_DOWNLOAD_URL_BASE = $githubReleasesDownloadUrlBase
        
        npm install
        node patcher.js

        echo "PATCHED_ASAR_FILE_PATH=$patchedAsarOutput" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
      env:
        LOCALAPPDATA: ${{ env.LOCALAPPDATA }}
        PROGRAMFILES: ${{ env.ProgramFiles }}

    - name: Finalize Release Info (Calculate Hash/Size)
      id: finalize_release_info
      run: |
        $patchedAsarPath = "${{ steps.patcher.outputs.PATCHED_ASAR_FILE_PATH }}"
        if (-not (Test-Path $patchedAsarPath)) {
            Write-Error "Patched app.asar not found at $patchedAsarPath after patcher script!"
            exit 1
        }
        $asarHash = (Get-FileHash -Algorithm SHA512 -Path $patchedAsarPath | Select-Object -ExpandProperty Hash).ToLower()
        $asarSize = (Get-Item $patchedAsarPath).Length
        echo "asar_hash=$asarHash" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "asar_size=$asarSize" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh

    - name: Create latest.yml
      run: |
        $version = "${{ steps.generate_release_info.outputs.version }}"
        $asarFileName = "${{ steps.generate_release_info.outputs.asar_file_name }}"
        $asarHash = "${{ steps.finalize_release_info.outputs.asar_hash }}"
        $asarSize = "${{ steps.finalize_release_info.outputs.asar_size }}"
        $releaseDate = $(Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
        
        $contentLines = @(
            "version: $version",
            "files:",
            "  - url: $asarFileName",
            "    size: $asarSize",
            "    sha512: $asarHash",
            "path: $asarFileName",
            "sha512: $asarHash",
            "releaseDate: $releaseDate"
        )
        Set-Content -Path "latest.yml" -Value ($contentLines -join "`n") -Encoding UTF8
      shell: pwsh

    - name: Create app-update.yml
      id: create_app_update_yml 
      run: |
        $repoOwner = "${{ github.repository_owner }}"
        $repoName = "${{ github.event.repository.name }}"
        
        $contentLines = @(
            "provider: github",
            "owner: $repoOwner",
            "repo: $repoName",
            "useMultipleRangeRequest: false",
            "updaterCacheDirName: yandexmusic-updater"
        )
        Set-Content -Path "app-update.yml" -Value ($contentLines -join "`n") -Encoding UTF8
      shell: pwsh

    - name: Create Release Notes JSON (ru)
      run: |
        $releaseNotesMarkdown = "${{ github.event.inputs.release_notes_ru_text }}"
        $version = "${{ steps.generate_release_info.outputs.version }}"
        $currentDate = (Get-Date -Format "dd MMMM yyyy г.")

        $paragraphs = $releaseNotesMarkdown -split "`n`n" | Where-Object { $_ -ne "" }

        $astNodes = @()
        $astNodes += @{ "type" = 8; "value" = "date"; "children" = @(@{ "type" = 0; "value" = $currentDate }) }
        $astNodes += @{ "type" = 0; "value" = "`n" }

        foreach ($p in $paragraphs) {
            $p = $p.Trim()
            if ($p.StartsWith('* ') -or $p.StartsWith('- ')) {
                $listItems = $p -split "`n" | Where-Object { $_ -ne "" }
                $listNodes = @()
                foreach ($item in $listItems) {
                    $item = $item.TrimStart('*', '-', ' ')
                    $listNodes += @{ "type" = 0; "value" = "`n" }
                    $listNodes += @{ "type" = 8; "value" = "li"; "children" = @(@{ "type" = 0; "value" = $item }) }
                }
                $listNodes += @{ "type" = 0; "value" = "`n" }
                $astNodes += @{ "type" = 8; "value" = "ul"; "children" = $listNodes }
            } else {
                $astNodes += @{ "type" = 8; "value" = "p"; "children" = @(@{ "type" = 0; "value" = $p }) }
            }
            $astNodes += @{ "type" = 0; "value" = "`n" }
        }
        
        $releaseNotesJson = @{
            ("desktop-release-notes." + $version) = $astNodes
        } | ConvertTo-Json -Depth 100 -Compress

        $releaseNotesDir = "release-notes"
        if (-not (Test-Path $releaseNotesDir)) {
            New-Item -ItemType Directory -Path $releaseNotesDir
        }
        
        Set-Content -Path (Join-Path $releaseNotesDir "ru.json") -Value $releaseNotesJson -Encoding UTF8
      shell: pwsh

    - uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.generate_release_info.outputs.version }}
        name: Patched Yandex Music - ${{ steps.generate_release_info.outputs.version }}
        body: |
          A new patched version of Yandex Music.
          
          This release includes:
          - Discord RPC integration
          - Custom update source for release notes
          
          **How to use (manual replacement):**
          1. Download `app.asar`, `app-update.yml`, `latest.yml`, and `release-notes/ru.json` (and other languages) from this release.
          2. Locate your Yandex Music installation folder (usually `C:\Users\<YOUR_USERNAME>\AppData\Local\Programs\YandexMusic` or `C:\Program Files\Yandex Music`).
          3. Navigate to the `resources` subfolder.
          4. Replace `app.asar` and `app-update.yml`. Place `latest.yml` there.
          5. Create a `release-notes` folder inside `resources` if it doesn't exist, and place `ru.json` (and others) inside it.
          
          **For automatic updates (after initial manual setup):**
          If you have replaced `app-update.asar`, `app-update.yml` and placed `latest.yml` and `release-notes/ru.json` (and others) in your Yandex Music `resources` folder, the application should now check for updates from this GitHub repository.
          
          **WARNING:** This will replace your existing `app.asar`, `app-update.yml`, `latest.yml`, and `release-notes` files. Back up your files first!
        files: |
          app.asar
          app-update.yml
          latest.yml
          release-notes/ru.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
